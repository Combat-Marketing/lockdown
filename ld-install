#!/bin/bash
#ld-install

#===============================================================================
#
# FILE: 
#   ld-install
#
# REVISION:  
#   001
#
# WHEN TO USE:  
#   When you are very sure you want to boot up the full Lockdown suite of
#   utilities in their default configuration.
#
# USAGE: 
#   ld-install [-d] [-n] [-s] [-v] [-y]
#   ld-install [--dry-run] [--no-download] [--silent] [--verbose] [--yes]
#
# DESCRIPTION:
#   This script will try to do all of the following things, 
#    once it starts running, and in the order specified:
#     * Install extra packages for Enterprise Linux if required
#     * Install iptables, ipset and fail2ban if required
#     * Stop each of the three above services if running
#     * Copy default configuration files into place
#     * Start each of the three services
#     * Enable each of the three services to run at boot
#     * Stop nftables or firewalld
#     * Disable nftables or firewalld from running at boot
#
# OPTIONS:
#   -d | --dry-run
#      Echos the commands that would be executed rather than executing them
#   -h | --help
#      Run help function and exit
#   -n | --no-download
#      Do not run commands to download latest blacklist & country CIDR lists
#   -s | --silent
#      Silent will attempt to prevent any and all output except in the event
#      of failure.  Silent operation implies --yes and will not ask permission
#      for anything, you have been warned!
#      Currently, any output from external programs will not be suppressed.
#   -v | --verbose
#      Output each line of the script after validations are parsed
#   -x | --no-backup
#      Do not back up any potentially pre-existing files
#   -y | --yes
#      Automatically say yes to everything
#
# TODO:
#  Add -p|--ports option to open custom ports
#  Add -s|--silent option
#  Integrate pre/post processing rules
#
# AUTHOR: Jason White (@iDoMeteor)
#===============================================================================

# Strict mode
set -euo pipefail
IFS=$'\n\t'

# Load configuration file
SRCDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
if [ ! -f $SRCDIR/conf/lockdown-default.conf ] && [ ! -f $SRCDIR/conf/lockdown.conf ]
then
  echo "Lockdown installation configuration file not found, cannot continue."
  exit 1
fi
if [ -f $SRCDIR/conf/lockdown-default.conf ]
then
  . $SRCDIR/conf/lockdown-default.conf
fi
if [ -f $SRCDIR/conf/lockdown.conf ]
then
  . $SRCDIR/conf/lockdown.conf
fi

# Instantiate Variables
BACKUP=1
DATE=`date +%Y%m%d%H%M%S`
DISTRO=''
DOWNLOAD=$update_lists
DRY_RUN=''
EPEL='epel-release'
FAIL2BAN='fail2ban'
GAMIN='gamin'
IPSET='ipset'
IPTABLES='iptables'
PACKAGE_MANAGER='yum'
PORTS=$ports
SILENT=0
YES=''

# Save origin
ORIGIN=`pwd`

# Distro determination
determine_distro () {
  if [ -f /etc/os-release ]
  then
    if [[ `cut -d= -f2 /etc/os-release` =~ 'Amazon Linux' ]]
    then
      DISTRO='Amazon Linux'
    elif [[ `cut -d= -f2 /etc/os-release` =~ 'CentOS' ]]
    then
      DISTRO='CentOS'
    elif [[ `cut -d= -f2 /etc/os-release` =~ 'Fedora' ]]
    then
      DISTRO='Fedora'
      PACKAGE_MANAGER='dnf'
    elif [[ `cut -d= -f2 /etc/os-release` =~ 'RHEL' ]]
    then
      DISTRO='RHEL'
    elif [[ `cut -d= -f2 /etc/os-release` =~ 'Red Hat' ]]
    then
      DISTRO='RHEL'
    elif [[ `cut -d= -f2 /etc/os-release` =~ 'Ubuntu' ]]
    then
      DISTRO='Ubuntu'
      PACKAGE_MANAGER='apt-get'
    fi
  elif [ -f /etc/system-release ]
  then
    if [[ `cut -d= -f2 /etc/system-release` =~ 'CentOS' ]]
    then
      DISTRO='CentOS'
    fi
  fi
}

# Help function
help () { 
  echo "Description:"
  echo "  XXX"
  echo "Usage:"
  echo "  `basename $0` [-f] [-v]"
  echo "  `basename $0` [--force] [--verbose]"
  exit 0
}

# Lockdown initialization
init_lockdown () {
  if [ ! -d /usr/local/sbin ]
  then
    mkdir -p /usr/local/sbin
  fi
  if [ -d /usr/local/sbin ]
  then
    chmod u+x bin/*
    cp bin/* /usr/local/sbin
  else
    echo "Could not create or access /usr/local/sbin, installation cannot continue"
    exit 1
  fi
  if [ ! -d /etc/lockdown ]
  then
    mkdir -p /etc/lockdown
  fi
  if [ -d /etc/lockdown ]
  then
    cp -r blacklist-ips /etc/lockdown
    cp -r blacklist-networks /etc/lockdown
    cp -r conf /etc/lockdown
    cp -r fail2ban /etc
    cp -r lists /etc/lockdown
    cp -r post-process /etc/lockdown
    cp -r pre-process /etc/lockdown
    cp -r whitelist-ips /etc/lockdown
    cp -r whitelist-networks /etc/lockdown
  else
    echo "Could not create or access /etc/lockdown, installation cannot continue"
    exit 1
  fi
  if [ ! -d /usr/local/share/lockdown ]
  then
    mkdir -p /usr/local/share/lockdown
  fi
  if [ -d /usr/local/share/lockdown ]
  then
    cp -r lists/* /usr/local/share/lockdown
  else
    echo "Could not create or access /usr/local/share/lockdown, installation cannot continue"
    exit 1
  fi
}

# Report installation status
installation_report () {
  # Check for executables & required directories
  if [ -f /usr/bin/iptables ]
  then
    echo "/usr/bin/iptables found"
  else
    "Could not find iptables, please report on Github issues"
    exit 1
  fi
  if [ -f /usr/sbin/ipset ]
  then
    echo "/usr/sbin/ipset found"
  else
    "Could not find ipset, please report on Github issues"
    exit 1
  fi
  if [ -f /usr/bin/fail2ban-client ]
  then
    echo "/usr/bin/fail2ban-client found"
  else
    echo "Could not find fail2ban, please report on Github issues"
    exit 1
  fi
  if [ -d /etc/fail2ban ]
  then
    echo "/etc/fail2ban found"
  else
    "Could not find fail2ban configuration files, please report on Github issues"
    exit 1
  fi
  if [ -d /etc/lockdown ]
  then
    echo "/etc/lockdown found"
  else
    "Could not find Lockdown configuration files, please report on Github issues"
    exit 1
  fi
  if [ -d /usr/share/lockdown ]
  then
    echo "/usr/share/lockdown found"
  else
    "Could not find Lockdown lists, please report on Github issues"
    exit 1
  fi
  if [ -f /usr/local/sbin/ld-allow ]
  then
    echo "/etc/lockdown found"
  else
    "Could not find Lockdown configuration files, please report on Github issues"
    exit 1
  fi

  # Check required services are running
  if (( `pidof nftables` ))
  then
    "nftables process found, please report on Github issues"
    exit 1
  else
    echo "nftables not running"
  fi
  if (( `pidof firewalld` ))
  then
    "firewalld process found, please report on Github issues"
    exit 1
  else
    echo "firewalld not running"
    exit 1
  fi

  # Check required services are running
  if (( `pidof iptables` ))
  then
    echo "iptables is running"
  else
    "iptables process not found, please report on Github issues"
    exit 1
  fi
  if (( `pidof ipset` ))
  then
    echo "ipset is running"
  else
    "ipset process not found, please report on Github issues"
    exit 1
  fi
  if (( `pidof fail2ban-server` ))
  then
    echo "fail2ban-server is running"
  else
    "fail2ban-server process not found, please report on Github issues"
    exit 1
  fi

  # Make sure everything is A-OK (ld-test should exit 0 status w/no output)
  if (( `/usr/local/sbin/ld-test` ))
  then
    "Lockdown test failed, please report on Github issues"
    exit 1
  else
    echo "Lockdown test passed."
  fi

  # Display success message and show user relevant files
  echo
  echo
  echo "Success!"
  echo "Lockdown executables are in /usr/local/sbin and start with ld-"
  echo "ls /usr/local/sbin/ld-*:"
  ls /usr/local/sbin/ld-*
  echo "Lockdown configuration files are in /etc/lockdown"
  echo "ls /etc/lockdown:"
  ls /etc/lockdown
  echo "Lockdown blacklist & country files are in /usr/share/lockdown"
  echo "ls /usr/share/lockdown:"
  ls /usr/share/lockdown
  echo
  echo "May the force of my ban hammer be with you! - @iDoMeteor"
}

# Check for arguments or provide help
if [ $# -eq 0 ] ; then
  help
fi

# Parse command line arguments into variables
while :
do
    case ${1:-} in
      -d | --dry-run)
      DRY_RUN='echo'
      shift 1
    ;;
      -h | --help)
      help
      shift 1
    ;;
      -n | --no-download)
      DOWNLOAD=0
      shift 1
    ;;
      -s | --silent)
      SILENT=1
      YES='-y'
      shift 1
    ;;
      -v | --verbose)
      VERBOSE=true
      shift 1
    ;;
      -x | --no-backup)
      BACKUP=0
      shift 1
    ;;
      -y | --yes)
      YES='-y'
      shift 1
    ;;
      -*)
      echo "Error: Unknown option: $1" >&2
      exit 1
    ;;
      *)  # No more options
      break
    ;;
    esac
done

# Check verbosity
if [ -v VERBOSE ] ; then
  set -v
fi

# Ensure distro is supported
determine_distro
if [ -z "$DISTRO" ]
then
  echo "Could not determine distro, cannot continue."
  echo "Please report this as a bug on Github, thanks!"
  exit 1
elif (( ! SILENT ))
then
  echo "$DISTRO discovered, proceeding with $PACKAGE_MANAGER"
fi

# Warn user unless using force
if [ -z $YES ]
then
  echo "Lockdown is a sophisticated control system for a suite of sophisticated software."
  echo "It's misuse or breakage can cause your system to become unusable or unable to"
  echo "accept incoming traffic or send any out.  In the case of failures, you must be"
  echo "capable of diagnosing and repairing any problems.  Lockdown is free software"
  echo "provided as is and you are responsible for any effects or side-effects of it's"
  echo "existence on your systems."
  echo
  echo "You are about to perform this installation on `hostname`."
  echo "`curl -s whatip.gzo.com`."
  echo
  read -p "Proceed with installation and configuration of Lockdown and all related services? [y/N] " -n 1 -r REPLY
  if [[ $REPLY =~ ^[Yy]$ ]] ; then
    echo
    echo "Locking down `hostname`!"
  else
    echo "Exiting without making any changes."
    exit 2
  fi
fi

# Attempt to back up pre-existing configuration files, this is similar
# to what ld-export does but does not attempt to save a running configuration.
if (( BACKUP ))
then
  $DRY_RUN mkdir -p "./bak/$DATE" && \
  $DRY_RUN cp -r \
    /etc/fail2ban* \
    /etc/ip6tables* \
    /etc/ipset* \
    /etc/iptables* \
    /etc/lockdown* \
    /etc/sysconfig/ip6tables* \
    /etc/sysconfig/iptables* \
    "./bak/$DATE"
  $DRY_RUN tar czf "./bak/$DATE-ld-pre-install.tar.gz" "./bak/$DATE"
fi

## Begin Installations!!
if [ 'yum' = $PACKAGE_MANAGER ] || [ 'dnf' = $PACKAGE_MANAGER ]
then
  # TODO: Check if this is already installed
  $DRY_RUN $PACKAGE_MANAGER install $YES $EPEL
fi
if [ ! -f /usr/bin/iptables ]
then
  $DRY_RUN $PACKAGE_MANAGER install $YES $IPTABLES
fi
if [ ! -f /usr/sbin/ipset ]
then
  $DRY_RUN $PACKAGE_MANAGER install $YES $IPSET
fi
if [ ! -f /usr/bin/fail2ban-server ]
then
  $DRY_RUN $PACKAGE_MANAGER install $YES $FAIL2BAN
fi
if [ ! -f /usr/lib64/libgamin-1.so.0 ]
then
  $DRY_RUN $PACKAGE_MANAGER install $YES $GAMIN
fi
$DRY_RUN init_lockdown $YES

## Manipulate system daemons!!
# This is done in the following order for maximum safety
# Start required services
# Stop conflicting services
# Enable required services
# Disable conflicting services
##
if (( ! SILENT )) ; then echo; fi
case $DISTRO in
  "Amazon Linux"|"CentOS")
    #   Amazon Linux, CentOS
    #     service x start|stop|etc
    #     chkconfig x on|off
    if (( ! SILENT )) ; then echo "Starting services for $DISTRO"; fi
    $DRY_RUN service fail2ban start
    if [ 0 -ne $? ] && [ -z $DRY_RUN ]
    then
        echo "Failed to start fail2ban, exiting."
        exit 1
    fi
    $DRY_RUN service ipset start
    if [ 0 -ne $? ] && [ -z $DRY_RUN ]
    then
        echo "Failed to start ipset, exiting."
        exit 1
    fi
    $DRY_RUN service iptables start
    if [ 0 -ne $? ] && [ -z $DRY_RUN ]
    then
        echo "Failed to start iptables, exiting."
        exit 1
    fi
    if (( ! SILENT )) ; then echo "Enabling services for $DISTRO"; fi
    $DRY_RUN chkconfig fail2ban on
    if (( `chkconfig fail2ban` )) && [ -z $DRY_RUN ]
    then
        echo "Failed to enable fail2ban, exiting."
    fi
    $DRY_RUN chkconfig ipset on
    if (( `chkconfig ipset` )) && [ -z $DRY_RUN ]
    then
        echo "Failed to enable fail2ban, exiting."
    fi
    $DRY_RUN chkconfig iptables on
    if (( `chkconfig iptables` )) && [ -z $DRY_RUN ]
    then
        echo "Failed to enable fail2ban, exiting."
    fi
    if (( ! SILENT )) ; then echo "Service configuration completed successfully!"; fi
  ;;
  "Fedora"|"RHEL"|"Ubuntu")
    #   Fedora, RHEL, Ubuntu
    #     systemctl start|stop|etc x
    #     systemctl enable|disable x
    if (( ! SILENT )) ; then echo "Starting systemctl starts for $DISTRO"; fi
    $DRY_RUN systemctl start fail2ban
    if [ 0 -ne $? ] && [ -z $DRY_RUN ]
    then
        echo "Failed to start fail2ban, exiting."
        exit 1
    fi
    $DRY_RUN systemctl start ipset
    if [ 0 -ne $? ] && [ -z $DRY_RUN ]
    then
        echo "Failed to start ipset, exiting."
        exit 1
    fi
    $DRY_RUN systemctl start iptables
    if [ 0 -ne $? ] && [ -z $DRY_RUN ]
    then
        echo "Failed to start iptables, exiting."
        exit 1
    fi
    if (( ! SILENT )) ; then echo "Enabling services for $DISTRO"; fi
    $DRY_RUN systemctl enable fail2ban
    if (( `systemctl is-enabled fail2ban` )) && [ -z $DRY_RUN ]
    then
        echo "Failed to enable fail2ban, exiting."
    fi
    $DRY_RUN systemctl enable ipset
    if (( `systemctl is-enabled ipset` )) && [ -z $DRY_RUN ]
    then
        echo "Failed to enable fail2ban, exiting."
    fi
    $DRY_RUN systemctl enable iptables
    if (( `systemctl is-enabled iptables` )) && [ -z $DRY_RUN ]
    then
        echo "Failed to enable fail2ban, exiting."
    fi
    if (( ! SILENT )) ; then echo "Service configuration completed successfully!"; fi
  ;;
  *)  # No more options
    echo "Unsupported distro, exiting."
    exit 1
  ;;
esac
if (( ! SILENT )) ; then echo; fi

# Download latest lists
if (( DOWNLOAD ))
then
  if (( ! SILENT ))
  then
    echo "Downloading latest blacklists & country CIDRs."
  fi
  $DRY_RUN /usr/local/sbin/ld-update-lists -f
fi
if (( ! SILENT )) ; then echo; fi

## Initialize ipset
# Clear IP set
$DRY_RUN ipset flush
$DRY_RUN ipset x

# Process IP Set pre-process rules
if [ -f "$SRCDIR/pre-process/ipset.rules" ]
then
  . "$SRCDIR/pre-process/ipset.rules" $SILENT
elif (( ! $2 ))
  echo "Rules file $1 not found, skipping"
fi

# Create sets
$DRY_RUN ipset create blacklist-f2b hash:ip
$DRY_RUN ipset create blacklist-ips hash:ip
$DRY_RUN ipset create blacklist-net hash:net
$DRY_RUN ipset create whitelist-ips hash:ip
$DRY_RUN ipset create whitelist-net hash:net
$DRY_RUN ipset create blacklist-countries hash:net
$DRY_RUN ipset create whitelist-countries hash:net

# Load list data into sets
$DRY_RUN $location_bin/ld-load-lists

# Process IP Set post-process rules
if [ -f "$SRCDIR/post-process/ipset.rules" ]
then
  . "$SRCDIR/post-process/ipset.rules" $SILENT
elif (( ! $2 ))
  echo "Rules file $1 not found, skipping"
fi

## Initialize iptables
# Flush nat, mangle, all chains
$DRY_RUN iptables -t nat -F
$DRY_RUN iptables -t mangle -F
$DRY_RUN iptables -F
# Delete non-default chains
$DRY_RUN iptables -X
# Set default policy to drop
$DRY_RUN iptables -P INPUT DROP
$DRY_RUN iptables -P FORWARD DROP
$DRY_RUN iptables -P OUTPUT ACCEPT

# Process IP Tables pre-process rules
if [ -f "$SRCDIR/pre-process/iptables.rules" ]
then
  . "$SRCDIR/pre-process/iptables.rules" $SILENT
elif (( ! $2 ))
  echo "Rules file $1 not found, skipping"
fi

# Drop invalid packets
$DRY_RUN iptables -I INPUT 1 -m conntrack --ctstate INVALID -j DROP
# Allow all to/from loopback (lo)
$DRY_RUN iptables -I INPUT 2 -i lo -j ACCEPT
$DRY_RUN iptables -I OUTPUT 1 -i lo -j ACCEPT
# Allow established & related incoming, for outgoing 
# connections initiated from server
$DRY_RUN iptables -I INPUT 3 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
# Create set matching rules
$DRY_RUN iptables -I INPUT 4 -m set --match-set whitelist-ips -J ACCEPT
$DRY_RUN iptables -I INPUT 5 -m set --match-set blacklist-ips -J DROP
$DRY_RUN iptables -I INPUT 6 -m set --match-set whitelist-net -J ACCEPT
$DRY_RUN iptables -I INPUT 7 -m set --match-set blacklist-net -J DROP
$DRY_RUN iptables -I INPUT 8 -m set --match-set whitelist-countries -J ACCEPT
$DRY_RUN iptables -I INPUT 9 -m set --match-set blacklist-countries -J DROP
# Create global inlets
for port in ${PORTS[@]}
do
  # This rule avoids connection tracking in favor of optimal processing 
  # speed which is the same reason we allow all outgoing traffic rather 
  # than just related - at small scale this would be a non-issue but at
  # scale would definitely add a lot of extra cpu cycles in the long term
  $DRY_RUN iptables -A INPUT -p tcp --dport $port -j ACCEPT
  # If you were to use a drop target in the default outgoing policy, then
  # you would want to add an established/related output rule here as well.
done

# Process IP Tables post-process rules
if [ -f "$SRCDIR/post-process/iptables.rules" ]
then
  . "$SRCDIR/post-process/iptables.rules" $SILENT
elif (( ! $2 ))
  echo "Rules file $1 not found, skipping"
fi


# Installation complete, present results to user if applicable
if [ $DRY_RUN ]
then
  # Dry run notification
  echo
  echo "*Notice*"
  echo "You have run ld-install in dry run mode."
  echo "If you run the same command line without -d or --dry-run again,"
  echo "the commands above will be executed and permanent changes will be made."
  echo
  echo "Lockdown has *not* been installed and your system has not been altered!"
elif (( ! SILENT ))
then
  # Checking installation
  installation_report
fi

## w00t!
exit 0
