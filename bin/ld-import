#!/bin/bash
#ld-import 
#===============================================================================
#
# WHEN TO USE:
#   When you want to import, and implement, a previously exported configuration.
#
# USAGE: 
#   ld-import [-t /tmp] path/
#   ld-import [--temp /tmp] ./filename.tar.gz
#
# DESCRIPTION:
#   Imports previously exported configurations for IP Tables, IP Set and 
#   Fail2Ban from a directory or tarball.  Services will be stopped,
#   configuration imported, and then services will be started again.
#
#   Currently running configuration will be exported if possible.
#
# OPTIONS:
#   path | filename
#      Path or filename to import data from
#   -d | --dry-run
#      Echos the commands that would be executed rather than executing them
#   -h | --help
#      Run help function and exit
#   -n | --no-backup
#      Does not attempt to backup current configuration
#   -t | --tmp
#      Default = /tmp
#      Provide an alternate location to save current configuration, only
#      relevant if passing a tarball to import
#   -v | --verbose
#      Output each line of the script after validations are parsed
#
# AUTHOR: Jason (@iDoMeteor)
#===============================================================================

# Strict mode
set -euo pipefail
IFS=$'\n\t'

# Values
BACKUP=1
DATE=`date +%Y%m%d%H%M%S`
DRY_RUN=''
FILENAME=''
ORIGIN="`pwd`"
TARBALL=''
TMP_LOCATION='/tmp'
TYPE=''
VERBOSE=0
WORKING_DIR="lockdown-$DATE"

# Help function
help () { 
  echo "Description:"
  echo "  Restores previously exported (by Lockdown) configuration of IP Tables,"
  echo "  IP Set and Fail2Ban.  An attempt will be made to back up the current"
  echo "  configuration, but you will not be asked for confirmation to overwrite"
  echo "  files."
  echo "Usage:"
  echo "  `basename $0` [-d] [-h] [-v]"
  echo "  `basename $0` [--dry-run] [--help] [--verbose]"
  exit 0
}

# Check for arguments or provide help
if [ $# -eq 0 ] ; then
  help
fi

# Parse command line arguments into variables
while :
do
    case ${1:-} in
      -d | --dry-run)
      DRY_RUN='echo'
      shift 1
    ;;
      -h | --help)
      help
      shift 1
    ;;
      -n | --no-backup)
      BACKUP=0
      shift 1
    ;;
      -t | --tmp)
      if [ -d $1 ]
      then
        TMP_LOCATION=$2
        shift 2
      else
        echo "Error: Invalid temporary location specified: $2"
        exit 1
      fi
    ;;
      -v | --verbose)
      VERBOSE=true
      shift 1
    ;;
      -*)
      echo "Error: Unknown option: $1" >&2
      exit 1
    ;;
      *)  # Should be a filename or path
      if [ -d $1 ]
      then
	TYPE='dir'
        WORKING_DIR=$1
        shift 1
      elif [ -f $1 ]
      then
        TARBALL=$1
	TYPE='file'
        shift 1
      else
      then
        echo "Error: Unknown target: $1" >&2
        exit 1
      fi
    ;;
    esac
done

# Check verbosity
if (( VERBOSE ))
then
  set -v
fi

# Stop services
$DRY_RUN service fail2ban stop
$DRY_RUN service iptables stop
$DRY_RUN service ipset stop

# Kill services if necessary
$DRY_RUN pidof fail2ban && $DRY_RUN pidof fail2ban | $DRY_RUN xargs kill -9
$DRY_RUN pidof iptables && $DRY_RUN pidof iptables | $DRY_RUN xargs kill -9
$DRY_RUN pidof ipset && $DRY_RUN pidof ipset | $DRY_RUN xargs kill -9

# Backup currently saved configuration
if (( BACKUP ))
then
  $DRY_RUN ld-export
fi

# Set up temporary space if passed a tarball
if [ $TYPE = 'file' ] && [ -f "$TARBALL" ]
then
  $DRY_RUN mkdir -p "$TMP_LOCATION/$WORKING_DIR"
  $DRY_RUN cp $TARBALL "$TMP_LOCATION/$WORKING_DIR"
  $DRY_RUN cd "$TMP_LOCATION/$WORKING_DIR"
  $DRY_RUN tar xzf *.tar.gz
elif [ $TYPE = 'dir' ] && [ -d "$WORKING_DIR" ] 
  $DRY_RUN cd $WORKING_DIR
fi

# Copy files into place
$DRY_RUN /bin/cp -rf etc/* /etc

# Check for iptables backup from running config exports
if [ -f iptables.bak ]
then
  $DRY_RUN iptables-restore < iptables.bak
fi

# Start services
$DRY_RUN service fail2ban start
$DRY_RUN service iptables start
$DRY_RUN service ipset start

# Test services
$DRY_RUN ld-test

# Clean up
if [ $TYPE = 'file' ]
then
  $DRY_RUN /bin/rm -rf $TMP_LOCATION/$WORKING_DIR
fi

exit 0
