#!/bin/bash
#ld-export

#===============================================================================
#
# FILE: 
#   ld-export
#
# REVISION:  
#   001
#
# WHEN TO USE:
#   When you want to archive currently saved (and relevant) configuration files 
#   from /etc.  This does NOT save the currently running configuration unless you
#   pass --save.
#
# USAGE: 
#   ld-export
#   ld-export [-d] [-h] [-n] [-p /path/to/export] [-s] [-t /tmp] [-v]
#   ld-export [--dry-run] [--help] [--no-compress] [--path /path/to/export]
#             [--save] [--tmp /tmp] [--verbose]
#
# DESCRIPTION:
#   Exports Fail2Ban, IP Set, IP Tables and Lockdown configuration files from
#   /etc to a tarball or directory of your choice.
#
# OPTIONS:
#   -d | --dry-run
#      Echos the commands that would be executed rather than executing them
#   -h | --help
#      Run help function and exit
#   -n | --no-compress
#      Copy the files to a folder rather than creating a tarball
#   -p | --path
#      Default: ./
#      Path or filename to save data to
#   -s | --save
#      Save the currently running configuration before exporting
#      This will *NOT* backup configs in /etc before saving, only after!
#   -t | --tmp
#      Default = /tmp
#      Provide an alternate location to save current configuration
#   -v | --verbose
#      Output each line of the script after validations are parsed
#
# AUTHOR: Jason (@iDoMeteor)
#===============================================================================

# Strict mode
set -euo pipefail
IFS=$'\n\t'

# Values
COMPRESS=1
DATE=`date +%Y%m%d%H%M%S`
DRY_RUN=''
TAG="lockdown-$DATE"
ORIGIN="`pwd`"
SAVE=0
SAVE_PATH="`pwd`"
TMP_LOCATION="/tmp"
VERBOSE=0

# Help function
help () { 
  echo "Description:"
  echo "  Saves current configuration of IP Tables, IP Set and Fail2Ban as a set of"
  echo "  files and directories in the directory specificed (or /etc when not set)."
  echo "  If any of the services are not running, their existing configuration file"
  echo "  from /etc will be used if it exists."
  echo "Usage:"
  echo "  `basename $0` [-d] [-h] [-n] [-p path] [-s] [-t path/to/tmp] [-v]"
  echo "  `basename $0` [--dry-run] [--help] [--no-compress] [--path /save/path] [--save] [--temp path/to/tmp] [--verbose]"
  exit $1
}

# Parse command line arguments into variables
while :
do
    case ${1:-} in
      -d | --dry-run)
      DRY_RUN='echo'
      shift 1
    ;;
      -h | --help)
      help 0
    ;;
      -n | --no-compress)
      COMPRESS=0
      shift 1
    ;;
      -p | --path)
      SAVE_PATH=$2
      shift 2
    ;;
      -s | --save)
      SAVE=1
      shift 1
    ;;
      -t | --tmp)
      TMP_LOCATION=$2
      shift 2
    ;;
      -v | --verbose)
      VERBOSE=1
      shift 1
    ;;
      -*)
      echo "Error: Unknown option: $1" >&2
      exit 1
    ;;
      *)  # No more options
      break
    ;;
    esac
done

# Check save path exists
if [ ! -d "$SAVE_PATH" ]
then
  echo "Output location $SAVE_PATH could not be found, cannot continue"
  exit 1
fi

# This would be illogical
if [ "/etc" = "$SAVE_PATH" ]
then
  echo "You must use ld-save to write running configuration to /etc."
  help 1
fi

# This would also be illogical
if [ "/etc" = "$TMP_LOCATION" ] || [ "/" = "$TMP_LOCATION" ]
then
  echo "You cannot use / or /etc as the temporary location."
  help 1
fi

# Check verbosity
if (( VERBOSE ))
then
  set -v
fi

# Save running configuration first if request
if (( SAVE ))
then
  /usr/sbin/ld-save --no-backup --yes
fi

# Set up for running configuration export
$DRY_RUN mkdir -p "$TMP_LOCATION/$TAG/etc/sysconfig"
$DRY_RUN cd "$TMP_LOCATION/$TAG"
$DRY_RUN /bin/cp -ar /etc/fail2ban etc/
$DRY_RUN /bin/cp -ar /etc/ipset* etc/
$DRY_RUN /bin/cp -ar /etc/sysconfig/ip6tables* etc/sysconfig
$DRY_RUN /bin/cp -ar /etc/sysconfig/iptables* etc/sysconfig
$DRY_RUN /bin/cp -ar /etc/lockdown etc/

if (( COMPRESS ))
then
  # Tar them and move them to destination
  $DRY_RUN tar czf "$SAVE_PATH/$TAG.tar.gz" etc
  $DRY_RUN /bin/rm -rf "$TMP_LOCATION/$TAG"
else
  # Move uncompressed files to save path
  $DRY_RUN mv "$TMP_LOCATION/$TAG" "$SAVE_PATH"
fi

exit 0
