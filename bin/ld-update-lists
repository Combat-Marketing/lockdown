#!/bin/bash
#ld-update-lists

#===============================================================================
#
# FILE: 
#   ld-update-lists
#
# REVISION:  
#   001
#
# WHEN TO USE:  
#   When you want to update provided lists, which you should probably do daily.
#
# USAGE: 
#   ld-update-lists [-d] [-f] [-g] [-h] [-s] [-v]
#   ld-update-lists [--dry-run] [--force] [--github] [--help] [--silent] [--verbose]
#
# DESCRIPTION:
#   Download the latest lists from the sites defined in the configuration
#   file.
#
# OPTIONS:
#   -d | --dry-run
#      Echos the commands that would be executed rather than executing them
#   -f | --force
#      Force downloading even if update_lists is 0
#   -g | --github
#      Use Github even if use_github is 0
#   -h | --help
#      Run help function and exit
#   -n | --no-github
#      Force direct downloads even if use_github is 1
#   -s | --silent
#      No output of any kind
#   -v | --verbose
#      Output each line of the script after validations are parsed
#
# AUTHOR: Jason (@iDoMeteor)
#===============================================================================

# Strict mode
set -euo pipefail
IFS=$'\n\t'

# Load configuration file
SRCDIR="/etc/lockdown"
if [ ! -d $SRCDIR ]
then
  echo "Lockdown configuration directory /etc/lockdown not found, cannot continue."
  exit 1
fi
if [ ! -f $SRCDIR/conf/lockdown-default.conf ] && [ ! -f $SRCDIR/conf/lockdown.conf ]
then
  echo "No Lockdown configuration file found, cannot continue."
  exit 1
fi
if [ -f $SRCDIR/conf/lockdown-default.conf ]
then
  . $SRCDIR/conf/lockdown-default.conf
fi
if [ -f $SRCDIR/conf/lockdown.conf ]
then
  . $SRCDIR/conf/lockdown.conf
fi

# Values
DRY_RUN=''
DOWNLOAD=$update_lists
GITHUB=$use_github
METHOD=
SILENT=0
VERBOSE=0

# Help function
help () { 
  echo "Description:"
  echo "  XXX"
  echo "Usage:"
  echo "  `basename $0` [-f] [-v]"
  echo "  `basename $0` [--force] [--verbose]"
  exit 0
}

# Save origin
ORIGIN=`pwd`

# Parse command line arguments into variables
while :
do
    case ${1:-} in
      -d | --dry-run)
      DRY_RUN='echo'
      shift 1
    ;;
      -f | --force)
      DOWNLOAD=1
      shift 1
    ;;
      -g | --github)
      GITHUB=1
      shift 1
    ;;
      -h | --help)
      help
    ;;
      -n | --no-github)
      GITHUB=0
      shift 1
    ;;
      -s | --silent)
      SILENT=1
      shift 1
    ;;
      -v | --verbose)
      VERBOSE=1
      shift 1
    ;;
      -*)
      echo "Error: Unknown option: $1" >&2
      exit 1
    ;;
      *)  # No more options
      break
    ;;
    esac
done

# No need to proceed if we're not allowed to update
# This is placed after parsing args so that help function will work
if (( ! DOWNLOAD ))
then
  if (( ! SILENT ))
  then
    echo "Updating is disabled in the configuration file, exiting"
  fi
  exit 0
fi

# Check verbosity
if (( VERBOSE )) ; then
  set -v
fi

# Make sure list location exists and go there
if [ ! -d "$location_lists" ]
then
  $DRY_RUN mkdir -p "$location_lists"
fi
$DRY_RUN cd "$location_lists"

# Determine type of update to perform
if (( GITHUB )) && [ -d .git ]
then
  METHOD='via Github'
  $DRY_RUN git pull
elif (( GITHUB )) && [ ! -d .git ]
then
  METHOD='via Github'
  # We use this odd sequence to avoid over-writing any potentially pre-existing
  # user lists
  $DRY_RUN git clone $repo_lists tmp
  $DRY_RUN /bin/cp -r tmp/* tmp/.git .
  $DRY_RUN /bin/rm -rf tmp
else
  METHOD='using direct download'
  if [ ! -d blacklists ]
  then
    $DRY_RUN mkdir blacklists
  fi
  $DRY_RUN cd blacklists
  $DRY_RUN wget -q --no-check-certificate https://www.team-cymru.org/Services/Bogons/fullbogons-ipv4.txt
  $DRY_RUN /bin/mv fullbogons-ipv4.txt bogons.cidr
  $DRY_RUN wget -q --no-check-certificate https://www.spamhaus.org/drop/drop.txt
  $DRY_RUN /bin/mv drop.txt spamhaus.cidr
  $DRY_RUN wget -q --no-check-certificate https://www.spamhaus.org/drop/edrop.txt
  $DRY_RUN /bin/mv edrop.txt spamhaus-extended.cidr
  #$DRY_RUN wget -q --no-check-certificate https://check.torproject.org/exit-addresses
  #$DRY_RUN mv exit-addresses tor-exits.ips
  $DRY_RUN wget -q --no-check-certificate https://rules.emergingthreats.net/fwrules/emerging-Block-IPs.txt
  $DRY_RUN mv emerging-Block-IPs.txt emergingthreats.net.ips
  $DRY_RUN wget -q --no-check-certificate https://lists.blocklist.de/lists/all.txt
  $DRY_RUN /bin/mv all.txt blocklist.de.ips
  $DRY_RUN cd ..
  if [ ! -d countries ]
  then
    $DRY_RUN mkdir countries
  fi
  $DRY_RUN cd countries
  if [ -f all-zones.tar.gz ]
  then
    $DRY_RUN /bin/rm all-zones.tar.gz
  fi
  $DRY_RUN wget -q http://www.ipdeny.com/ipblocks/data/countries/all-zones.tar.gz
  $DRY_RUN tar xzf all-zones.tar.gz
  $DRY_RUN /bin/rm all-zones.tar.gz
  $DRY_RUN cd ..
fi

if [ 'echo' = "$DRY_RUN" ]
then
  echo "*Notice*"
  echo "You have run ld-update-lists in dry run mode,"
  echo "Lockdown lists NOT updated!"
fi
if (( ! SILENT ))
then
  echo "Lockdown lists successfully updated $METHOD method @ `date`"
fi

exit 0
